plugins {
    id "com.android.application" version "3.6.0-alpha11" apply false
    id "com.android.library" version "3.6.0-alpha11" apply false

    id "org.jetbrains.kotlin.jvm" version "1.3.50" apply false
    id "org.jetbrains.kotlin.android" version "1.3.50" apply false
    id "org.jetbrains.kotlin.android.extensions" version "1.3.50" apply false
    id "org.jetbrains.kotlin.kapt" version "1.3.50" apply false

    id "com.github.ben-manes.versions" version "0.25.0"
    id "com.github.plnice.canidropjetifier" version "0.5"
    id "com.gradle.build-scan" version "2.4.2"
    id "com.google.gms.google-services" version "4.3.2" apply false
    id "io.fabric" version "1.31.0" apply false
    id "io.gitlab.arturbosch.detekt" version "1.0.1"
}

ext.ci = System.getenv("CI") != null
ext.buildConfig = [
    compileSdk : 29,
    minSdk     : 21,
    targetSdk  : 28,

    versionCode: 13,
    versionName: "0.2",
    dbVersion  : 1,
]

repositories {
    mavenCentral()
    jcenter()
}

subprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
            mavenContent {
                snapshotsOnly()
            }
            content {
                includeGroup "com.squareup.moshi"
            }
        }
        jcenter()
        maven { url "https://dl.bintray.com/sch/maven" }
        maven { url "https://jitpack.io" }
    }

    apply from: "$rootDir/gradle/common.gradle"

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs = ["-Xnew-inference", "-Xinline-classes"]

            if (name.toLowerCase().contains("release")) {
                allWarningsAsErrors = true
                freeCompilerArgs += ["-Xno-call-assertions", "-Xno-param-assertions", "-Xno-receiver-assertions"]
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

buildScan {
    termsOfServiceUrl = "https://gradle.com/terms-of-service"
    termsOfServiceAgree = "yes"

    if (ext.ci) {
        tag "CI"
        publishAlways()

        def buildUrl = System.getenv("CIRCLE_BUILD_URL")
        if (buildUrl != null) {
            link "Build", buildUrl
        }

        def pullRequestUrl = System.getenv("CIRCLE_PULL_REQUEST")
        if (pullRequestUrl != null) {
            link "Pull Request", pullRequestUrl
        }
    } else {
        tag "Local"
    }
}

detekt {
    toolVersion = "1.0.0"
    buildUponDefaultConfig = true
    config = files("config/detekt.yml")
    input = files(rootDir)
}

tasks.named("detekt").configure {
    exclude "**/build/**"
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      def isNonStable = { String version ->
        ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
          version ==~ /(?i).*[.-]$qualifier[.\d-+]*/
        }
      }

      if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
        selection.reject('Release candidate')
      }
    }
  }
}

apply from: "gradle/versions.gradle"

if (ext.ci) {
    apply from: "gradle/ci.gradle"
}
