plugins {
    id "com.android.application" version "3.4.0" apply false
    id "com.android.library" version "3.4.0" apply false

    id "org.jetbrains.kotlin.android" version "1.3.31" apply false
    id "org.jetbrains.kotlin.android.extensions" version "1.3.31" apply false
    id "org.jetbrains.kotlin.kapt" version "1.3.31" apply false

    id "com.google.gms.google-services" version "4.2.0" apply false
    id "com.github.ben-manes.versions" version "0.21.0"
    id "com.gradle.build-scan" version "2.2.1"
    id "io.fabric" version "1.28.1" apply false
    id "io.gitlab.arturbosch.detekt" version "1.0.0-RC14"
}

ext.ci = System.getenv("CI") == "true"
ext.buildConfig = [
    compileSdk : 28,
    minSdk     : 21,
    targetSdk  : 28,

    versionCode: 9,
    versionName: "0.1",
    dbVersion  : 1,
]

repositories {
    mavenCentral()
    jcenter()
}

subprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
            mavenContent {
                snapshotsOnly()
            }
            content {
                includeGroup "com.squareup.moshi"
            }
        }
        jcenter()
        maven { url "https://dl.bintray.com/sch/maven" }
        maven { url "https://jitpack.io" }
    }

    configurations.all { config ->
        exclude group: "com.google.code.findbugs", module: "jsr305"

        resolutionStrategy.eachDependency { details ->
            if (config.name.contains("UnitTest") && details.requested.group == "com.squareup.leakcanary" && details.requested.name == "leakcanary-android") {
                details.useTarget(group: details.requested.group, name: "leakcanary-android-no-op", version: details.requested.version)
            }
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs = ["-Xnew-inference"]

            if (name.toLowerCase().contains("release")) {
                allWarningsAsErrors = true
                freeCompilerArgs += ["-Xno-call-assertions", "-Xno-param-assertions", "-Xno-receiver-assertions"]
            }
        }
    }

    afterEvaluate {
        if (plugins.hasPlugin("com.android.application") ||
            plugins.hasPlugin("com.android.library") ||
            plugins.hasPlugin("com.android.dynamic-feature")) {
            android {
                compileSdkVersion buildConfig.compileSdk

                defaultConfig {
                    minSdkVersion buildConfig.minSdk
                    targetSdkVersion buildConfig.targetSdk

                    vectorDrawables.useSupportLibrary = true

                    javaCompileOptions {
                        annotationProcessorOptions {
                            includeCompileClasspath = false
                        }
                    }
                }

                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }

                lintOptions {
                    warningsAsErrors true
                    lintConfig rootProject.file("config/lint.xml")

                    textReport true
                    textOutput "stdout"
                    explainIssues false
                }

                sourceSets {
                    main.java.srcDirs += "src/main/kotlin"
                    debug.java.srcDirs += "src/debug/kotlin"
                    release.java.srcDirs += "src/release/kotlin"
                    test.java.srcDirs += "src/test/kotlin"
                    androidTest.java.srcDirs += "src/androidTest/kotlin"
                }
            }
        }

        if (plugins.hasPlugin("kotlin-kapt")) {
            kapt {
                correctErrorTypes = true
                useBuildCache = true
            }
        }

        if (plugins.hasPlugin("kotlin-android-extensions")) {
            androidExtensions {
                experimental = true
                features = ["parcelize"]
                defaultCacheImplementation = "NONE"
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

buildScan {
    termsOfServiceUrl = "https://gradle.com/terms-of-service"
    termsOfServiceAgree = "yes"

    if (ext.ci) {
        tag "CI"
        publishAlways()
    }
}

detekt {
    buildUponDefaultConfig = true
    config = files("config/detekt.yml")
    input = files(rootDir)
    filters ".*/build/.*"
}

apply from: "gradle/versions.gradle"
