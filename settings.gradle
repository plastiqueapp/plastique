pluginManagement {
    repositories {
        gradlePluginPortal()
        google()
        maven {
            url "https://maven.fabric.io/public"
        }
    }

    resolutionStrategy.eachPlugin {
        if (requested.version == null) {
            return
        }
        switch (requested.id.id) {
            case "com.android.application":
            case "com.android.library":
                useModule "com.android.tools.build:gradle:$requested.version"
                break
            case "com.google.gms.google-services":
                useModule "com.google.gms:google-services:$requested.version"
                break
            case "io.fabric":
                useModule "io.fabric.tools:gradle:$requested.version"
                break
        }
    }
}

plugins {
    id "com.gradle.enterprise" version "3.1.1"
}

def ci = System.getenv("CI") != null

buildCache {
    local {
        enabled = !ci
    }
}

gradleEnterprise {
    buildScan {
        termsOfServiceUrl = "https://gradle.com/terms-of-service"
        termsOfServiceAgree = "yes"

        if (ci) {
            publishAlways()
            tag "CI"

            def buildUrl = System.getenv("CIRCLE_BUILD_URL")
            if (buildUrl != null) {
                link "Build", buildUrl
            }

            def pullRequestUrl = System.getenv("CIRCLE_PULL_REQUEST")
            if (pullRequestUrl != null) {
                link "Pull Request", pullRequestUrl
            }
        } else {
            tag "Local"
        }
    }
}

include ":libraries:api"
include ":libraries:core"
include ":libraries:core-ui"

include ":features:common"
include ":features:auth"
include ":features:collections"
include ":features:comments"
include ":features:deviations"
include ":features:feed"
include ":features:gallery"
include ":features:main"
include ":features:notifications"
include ":features:profile"
include ":features:settings"
include ":features:statuses"
include ":features:users"
include ":features:watch"

include ":app"
