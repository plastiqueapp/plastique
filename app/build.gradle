plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "org.jetbrains.kotlin.kapt"
    id "com.github.triplet.play" version "2.3.0"
}

def googleServicesEnabled = file("google-services.json").exists()
if (googleServicesEnabled) {
    apply plugin: "io.fabric"
}

android {
    defaultConfig {
        applicationId "io.plastique.android"
        versionCode buildConfig.versionCode
        versionName buildConfig.versionName
        multiDexEnabled true
        resConfigs "en"

        archivesBaseName = "plastique-$versionName"
        buildConfigField "int", "DB_VERSION", "$buildConfig.dbVersion"

        if (rootProject.ext.ci) {
            resValue "string", "api_client_id", "42"
            resValue "string", "api_client_secret", "42"
        }

        testInstrumentationRunner "io.plastique.test.PlastiqueJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile rootProject.file("signing/debug.jks")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        release.initWith(debug)
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            ext.alwaysUpdateBuildId = false
            buildConfigField "boolean", "GOOGLE_SERVICES_ENABLED", "Boolean.parseBoolean(\"$googleServicesEnabled\")"
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard.cfg"
            signingConfig signingConfigs.release
            buildConfigField "boolean", "GOOGLE_SERVICES_ENABLED", "$googleServicesEnabled"
        }
    }

    flavorDimensions "environment"
    productFlavors {
        dev {
            dimension "environment"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }

        prod {
            dimension "environment"
        }
    }

    playConfigs {
        prodRelease {
            enabled = true
        }
    }

    dexOptions {
        preDexLibraries !rootProject.ext.ci
    }

    lintOptions {
        checkDependencies true
        checkReleaseBuilds false
    }

    packagingOptions {
        exclude "META-INF/*.version"
        exclude "META-INF/rxjava.properties"
        exclude "META-INF/rxkotlin.properties"
        exclude "**/*.kotlin_builtins"
        exclude "**/*.kotlin_metadata"
        exclude "**/*.kotlin_module"
        exclude "/*.properties"
        exclude "/fabric/*.properties"
    }

    testOptions {
        animationsDisabled = true
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "plastique-${variant.versionName}-${variant.buildType.name}.apk"
        }
    }
}

dependencies {
    implementation project(":libraries:api")
    implementation project(":libraries:core")
    implementation project(":libraries:core-ui")
    implementation project(":features:common")
    implementation project(":features:auth")
    implementation project(":features:collections")
    implementation project(":features:comments")
    implementation project(":features:deviations")
    implementation project(":features:feed")
    implementation project(":features:gallery")
    implementation project(":features:main")
    implementation project(":features:notifications")
    implementation project(":features:profile")
    implementation project(":features:settings")
    implementation project(":features:statuses")
    implementation project(":features:users")
    implementation project(":features:watch")

    implementation "com.google.firebase:firebase-core:$versions.firebase.core"
    implementation "com.squareup.moshi:moshi-adapters:$versions.moshi"
    implementation "io.requery:sqlite-android:$versions.sqlite"

    debugImplementation "com.facebook.flipper:flipper:$versions.flipper"
    debugImplementation "com.facebook.stetho:stetho-okhttp3:$versions.stetho"
    debugImplementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"

    kapt "androidx.room:room-compiler:$versions.androidx.room"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$versions.dagger"

    androidTestImplementation "junit:junit:$versions.junit.four"
    androidTestImplementation "androidx.test:core:$versions.androidx.test.core"
    androidTestImplementation "androidx.test:core-ktx:$versions.androidx.test.core"
    androidTestImplementation "androidx.test:rules:$versions.androidx.test.rules"
    androidTestImplementation "androidx.test:runner:$versions.androidx.test.runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.androidx.test.espresso"
    androidTestImplementation "com.squareup.rx.idler:rx2-idler:$versions.rxIdler"
}

kapt {
    arguments {
        arg("room.incremental", "true")
        arg("room.schemaLocation", "$projectDir/schemas")
    }
}

def signingPropertiesFile = rootProject.file("signing/signing.properties")
if (signingPropertiesFile.exists()) {
    def signingProperties = new Properties()
    signingPropertiesFile.withInputStream signingProperties.&load

    android.signingConfigs.release.storeFile = rootProject.file(signingProperties.getProperty("store.file"))
    android.signingConfigs.release.storePassword = signingProperties.getProperty("store.password")
    android.signingConfigs.release.keyAlias = signingProperties.getProperty("key.alias")
    android.signingConfigs.release.keyPassword = signingProperties.getProperty("key.password")
}

play {
    enabled = false
    defaultToAppBundles = true
    serviceAccountCredentials file("publish-keys.json")
    track = "internal"
}

if (googleServicesEnabled) {
    apply plugin: "com.google.gms.google-services"
}
